// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PUSHBLOCK_H_
#define FLATBUFFERS_GENERATED_PUSHBLOCK_H_

#include "flatbuffers/flatbuffers.h"

struct PushBlock;

struct PushBlock FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHUFFLEID = 4,
    VT_MAPID = 6,
    VT_REDUCEID = 8,
    VT_ADDRESS = 10,
    VT_SIZE = 12,
    VT_RKEY = 14
  };
  uint16_t shuffleId() const {
    return GetField<uint16_t>(VT_SHUFFLEID, 0);
  }
  uint16_t mapId() const {
    return GetField<uint16_t>(VT_MAPID, 0);
  }
  uint16_t reduceId() const {
    return GetField<uint16_t>(VT_REDUCEID, 0);
  }
  uint64_t address() const {
    return GetField<uint64_t>(VT_ADDRESS, 0);
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  uint64_t rkey() const {
    return GetField<uint64_t>(VT_RKEY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_SHUFFLEID) &&
           VerifyField<uint16_t>(verifier, VT_MAPID) &&
           VerifyField<uint16_t>(verifier, VT_REDUCEID) &&
           VerifyField<uint64_t>(verifier, VT_ADDRESS) &&
           VerifyField<uint64_t>(verifier, VT_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_RKEY) &&
           verifier.EndTable();
  }
};

struct PushBlockBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shuffleId(uint16_t shuffleId) {
    fbb_.AddElement<uint16_t>(PushBlock::VT_SHUFFLEID, shuffleId, 0);
  }
  void add_mapId(uint16_t mapId) {
    fbb_.AddElement<uint16_t>(PushBlock::VT_MAPID, mapId, 0);
  }
  void add_reduceId(uint16_t reduceId) {
    fbb_.AddElement<uint16_t>(PushBlock::VT_REDUCEID, reduceId, 0);
  }
  void add_address(uint64_t address) {
    fbb_.AddElement<uint64_t>(PushBlock::VT_ADDRESS, address, 0);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(PushBlock::VT_SIZE, size, 0);
  }
  void add_rkey(uint64_t rkey) {
    fbb_.AddElement<uint64_t>(PushBlock::VT_RKEY, rkey, 0);
  }
  explicit PushBlockBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PushBlockBuilder &operator=(const PushBlockBuilder &);
  flatbuffers::Offset<PushBlock> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PushBlock>(end);
    return o;
  }
};

inline flatbuffers::Offset<PushBlock> CreatePushBlock(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t shuffleId = 0,
    uint16_t mapId = 0,
    uint16_t reduceId = 0,
    uint64_t address = 0,
    uint64_t size = 0,
    uint64_t rkey = 0) {
  PushBlockBuilder builder_(_fbb);
  builder_.add_rkey(rkey);
  builder_.add_size(size);
  builder_.add_address(address);
  builder_.add_reduceId(reduceId);
  builder_.add_mapId(mapId);
  builder_.add_shuffleId(shuffleId);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_PUSHBLOCK_H_
